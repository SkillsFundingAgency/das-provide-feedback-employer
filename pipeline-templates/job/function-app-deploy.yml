# parameters:
#   ServiceConnection:
#   SolutionBaseName:
#   Environment:

# jobs:
# - deployment: DeployFunctionApp
#   pool:
#     name: DAS - Continuous Deployment Agents
#   environment: ${{ parameters.Environment }}
#   strategy:
#     runOnce:
#       deploy:
#         steps:
#         - template: azure-pipelines-templates/deploy/step/wait-azure-devops-deployment.yml@das-platform-building-blocks
#           parameters:
#             ServiceConnection: ${{ parameters.ServiceConnection }}
#             EnvironmentId: $(Environment.Id)
#             PipelineName: $(Build.DefinitionName)
#             RunId: $(Build.BuildId)
#         - template: azure-pipelines-templates/deploy/step/arm-deploy.yml@das-platform-building-blocks
#           parameters:
#             ServiceConnection: ${{ parameters.ServiceConnection }}
#             SubscriptionId: $(SubscriptionId)
#             Location: $(ResourceGroupLocation)
#             Environment: ${{ parameters.Environment }}
#             TemplatePath: $(Pipeline.Workspace)/${{ parameters.SolutionBaseName }}/azure/template.json
#             ParametersPath: $(Pipeline.Workspace)/${{ parameters.SolutionBaseName }}/azure/template.parameters.json
#             IsMultiRepoCheckout: true
#             TemplateSecrets:
#               LoggingRedisConnectionString: $(LoggingRedisConnectionString)
#               ConfigurationStorageConnectionString: $(ConfigurationStorageConnectionString)
#               SharedStorageAccountConnectionString: $(SharedStorageAccountConnectionString)
#         - template: azure-pipelines-templates/deploy/step/generate-config.yml@das-platform-building-blocks
#           parameters:
#             ServiceConnection: ${{ parameters.ServiceConnection }}
#             SourcePath: $(Pipeline.Workspace)/das-employer-config/Configuration/das-notifications #PLACEHOLDER
#             TargetFileName: '*.schema.json'
#             TableName: Configuration
#         - template: azure-pipelines-templates/deploy/step/function-deploy.yml@das-platform-building-blocks
#           parameters:
#             ServiceConnection: ${{ parameters.ServiceConnection }}
#             FunctionAppName: $(FunctionAppName)
#             DeploymentPackagePath: $(Pipeline.Workspace)/${{ parameters.SolutionBaseName }}/${{ parameters.SolutionBaseName }}.zip